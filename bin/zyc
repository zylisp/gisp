#!/bin/bash

# This script automates the original process of compiling Go bytecode. For
# example, you used to have to do this:
#
#   $ ./bin/gisp examples/even_fib_terms.gsp > examples/even_fib_terms.go
#   $ go build -o ./bin/sum-fib-terms examples/even_fib_terms.go
#
# Now you can just do this:
#
#   $ zyc examples/even_fib_terms.gsp

SCRIPT=$(basename $0)

function usage() {
    echo
    echo "Usage: $SCRIPT [OPTS] INFILE [INFILE2 [...]]"
    echo
    echo "Options:"
    echo
    echo "  -f         - Forcibly overwrite output files"
    echo "  -h         - Display help/usage information and then exit"
    echo "  -o OUTFILE - The optional file to save to; if more than one input"
    echo "               file is provided, this option will be required and "
    echo "               will be interpreted as a directory"
    echo "  -p         - Preserve the generated .go files"
    echo "  -v         - Verbose mode; display debugging messages"
    echo 1>&2;
    exit 1;
}

ARGS="$@"

while getopts ":fo:pv" OPT; do
    case "${OPT}" in
        f)
            FORCE=true
            ;;
        p)
            PRESERVE=true
            ;;
        o)
            OUT=${OPTARG}
            ;;
        v)
            DEBUG=true
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))
ARGS=($@)
ARG_COUNT=${#ARGS[@]}
ARGS_STR=${ARGS[*]}

function debug () {
    if [ "$DEBUG" = true ]; then
        echo "$@"
    fi
}

function error () {
    echo "$@"
    exit 1
}

if [ "$DEBUG" = true ]; then
    echo "Parsed opts/args:"
    echo "  DEBUG = ${DEBUG}"
    echo "  FORCE = ${FORCE}"
    echo "  OUT = ${OUT}"
    echo "  PRESERVE = ${PRESERVE}"
    echo "  ARG_COUNT: $ARG_COUNT"
    echo "  ARGS: $ARGS_STR"
fi

TMPDIR=/tmp$(mktemp)
mkdir -p $TMPDIR

debug "Created temporary directory: $TMPDIR"

if [ "$PRESERVE" = true ]; then
    debug "Generated Go file: $FILENAME_GO"
fi

if [ "$ARG_COUNT" -gt 2 ]; then
    debug ""
    debug "Creating output directory $OUT ..."
    mkdir -p $OUT
fi

for FILE in "${ARGS[@]}"; do
    debug "Processing file $FILE ..."
    FILENAME_W_EXT=$(basename $FILE)
    FILENAME="${FILENAME_W_EXT%.*}"
    FILENAME_GO=${TMPDIR}/${FILENAME}.go
    if [ -f "$FILENAME_GO" ]; then
        if [ "$FORCE" = true ]; then
            debug "Overwriting previously generated Go file ..."
            zylisp $FILE > $FILENAME_GO
        else
            echo "Go file exists; skipping"
        fi
    else
        debug "Creating new Go file ..."
        zylisp $FILE > $FILENAME_GO
    fi
    if [ "$ARG_COUNT" -gt 1 ]; then
        debug "Number of sources to compile is greater than 1"
        if [ ! -z "$OUT" ]; then
            mkdir -p $OUT
            OUT_FILE="${OUT}/${FILENAME}"
            debug "Outfile: $OUT_FILE"
        else
            OUT_FILE=$FILENAME
        fi
    else
        debug "Number of sources to compile is one or less"
        if [ ! -z "$OUT" ]; then
            OUT_FILE=$OUT
        else
            OUT_FILE=$FILENAME
        fi
    fi
    if [ ! -z "$OUT_FILE" ]; then
        if [ ! -f "$OUT_FILE" ]; then
            debug "Generating executable $OUT_FILE ..."
            go build -o $OUT_FILE $FILENAME_GO
        elif [ -f "$OUT_FILE" ] && [ "$FORCE" = true ]; then
            debug "Overwriting executable $OUT_FILE ..."
            go build -o $OUT_FILE $FILENAME_GO
        else
            debug "File $OUT_FILE exists; not forcing overwrite."
        fi
    else
        error "No outfile defined; skipping compilation"
    fi
done

if [ "$PRESERVE" = true ]; then
    echo "Keeping generated Go file in its temporary directory ..."
elif [ -z "$TMPDIR" ] ; then
    echo "TMPDIR value is not set; not removing"
else
    debug "Cleaning up temporary directory ..."
    rm -rf $TMPDIR
fi
